--Task 1: Show the query you would use to JOIN the tables Customers and Orders.  
SELECT * FROM Customers natural join Orders

--Task 2: Show product name and unit for all orders with a quantity over 20.  
SELECT ProductName, Unit 
FROM Orders, OrderDetails, Products
Where Orders.OrderID = OrderDetails.OrderID
and OrderDetails.ProductID = Products.ProductID
and Quantity > 20

--Task 3: List all order IDs and customer names by the country the customers are located in. Sort the results in a descending order. 
SELECT OrderID, CustomerName
FROM Customers NATURAL JOIN Orders
ORDER BY Country DESC

--Task 4: Show all orders made on 1996-11-11. Sort the list according to ShipperName. 
SELECT * FROM Orders NATURAL JOIN Shippers
WHERE OrderDate = '1996-11-11'
ORDER BY ShipperName  

--Task 5: List OrderID, CustomerName and their City for orders assigned to EmployeeID between 2 and 6. Show the list sorted ascending according to EmployeeID. 
SELECT OrderID, CustomerName, City
FROM Orders NATURAL JOIN Customers
WHERE EmployeeID  BETWEEN 2 AND 6
ORDER BY EmployeeID ASC

--Task 6: List the details of an order by showing order ID, order date, postal code for customers location, customer and employee name, and photo of the employee responsible for an order.  
SELECT Orders.OrderID, Orders.OrderDate, Customers.PostalCode, Customers.CustomerName, Employees.FirstName, Employees.LastName, Employees.Photo
FROM ((Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)
INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID);

--Task 7: Write a SQL query to show the orders made by each customer. Also include customers who have no orders. Order the output list by customer name.  
SELECT * 
FROM Customers
	LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
ORDER BY CustomerName

--Task 8: Write a SQL query where you show the total number of orders.  
SELECT COUNT()
FROM [Orders]

--Task 9: List ProductID and number of times a product has been ordered, from the table OrderDetails.  
SELECT ProductID, Count(*)
FROM OrderDetails
GROUP BY ProductID

--Task 10: Show the products that were ordered the most in the OrderDetails table, sorted descending according to number of times a specific product was ordered. Only include products that have been ordered 6 or more times. Return ProductName, ProductID and amount of time each product was ordered.  
SELECT ProductName, ProductID, Count(*)
FROM OrderDetails NATURAL JOIN Products
GROUP BY ProductID
HAVING COUNT(ProductID) >= 6
ORDER BY Count() DESC

--Task 11: Show a list of customers and their respective number of orders, ordered by the number of orders descendent. 
SELECT CustomerName, Count(*)
FROM Customers NATURAL JOIN Orders
GROUP BY CustomerID
ORDER BY Count() DESC

--Task 12: Write a SQL query to find the customers who have the same PostalCode. Return all records in the customers table and order the results by Country name in alphabetical order.  
SELECT * FROM Customers WHERE PostalCode IN (
    SELECT PostalCode FROM Customers GROUP BY PostalCode HAVING count(*) > 1)
order by country

--Task 13: Show the countries that are not in the suppliers table but are in the customers table. Return the name of the customers located in these countries and the country names. 
SELECT CustomerName, Country FROM Customers
Where
(SELECT Country FROM Customers
except
SELECT Country FROM Suppliers) = Country

--Task 14: Find the number of orders placed in 1997 by customers. Order the results by the highest number of orders placed in 1997. Return CustomerName and number of orders placed.   
SELECT CustomerName, Count(*)
FROM Orders NATURAL JOIN Customers
WHERE OrderDate LIKE '%1997%'
GROUP BY CustomerID
ORDER BY Count() DESC

--Task 15: Write a SQL query to find number of orders that each employee has been assigned to. Use a JOIN operator and return EmployeeID, FirstName, OrderID and Quantity of orders per employee. Show employees with most orders first and arrange the output according to FirstName. 
SELECT EmployeeID, FirstName, OrderID, Count(*)
FROM Orders NATURAL JOIN Employees
GROUP BY EmployeeID
ORDER BY count() DESC, FirstName DESC
